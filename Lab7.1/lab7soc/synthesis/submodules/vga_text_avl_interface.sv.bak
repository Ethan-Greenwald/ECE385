/************************************************************************
Avalon-MM Interface VGA Text mode display

Register Map:
0x000-0x0257 : VRAM, 80x30 (2400 byte, 600 word) raster order (first column then row)
0x258        : control register

VRAM Format:
X->
[ 31  30-24][ 23  22-16][ 15  14-8 ][ 7    6-0 ]
[IV3][CODE3][IV2][CODE2][IV1][CODE1][IV0][CODE0]

IVn = Draw inverse glyph
CODEn = Glyph code from IBM codepage 437

Control Register Format:
[[31-25][24-21][20-17][16-13][ 12-9][ 8-5 ][ 4-1 ][   0    ] 
[[RSVD ][FGD_R][FGD_G][FGD_B][BKG_R][BKG_G][BKG_B][RESERVED]

VSYNC signal = bit which flips on every Vsync (time for new frame), used to synchronize software
BKG_R/G/B = Background color, flipped with foreground when IVn bit is set
FGD_R/G/B = Foreground color, flipped with background when Inv bit is set

************************************************************************/
`define NUM_REGS 601 //80*30 characters / 4 characters per register
`define CTRL_REG 600 //index of control register

module vga_text_avl_interface (
	// Avalon Clock Input, note this clock is also used for VGA, so this must be 50Mhz
	// We can put a clock divider here in the future to make this IP more generalizable
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,					// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,			// Avalon-MM Byte Enable
	input  logic [9:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,		// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,		// Avalon-MM Read Data
	
	// Exported Conduit (mapped to VGA port - make sure you export in Platform Designer)
	output logic [3:0]  red, green, blue,	// VGA color channels (mapped to output pins in top-level)
	output logic hs, vs						// VGA HS/VS
);


//put other local variables here
//port A is for AVL bus; port B is for local VGA read
logic [9:0] VRAM_ADDR;
logic [31:0] VRAM_READDATA;
logic [31:0] rgb;

vram VRAM( .clk(CLK), .write_en(AVL_WRITE && AVL_CS), .read_addr_a(AVL_ADDR), .read_addr_b(VRAM_ADDR), .byte_en(AVL_BYTE_EN), .write_data(AVL_WRITEDATA), .read_data_a(AVL_READDATA), .read_data_b(VRAM_READDATA) );
				


//shadow ctrl_reg(.CLK, .rst(RESET), .write_flag(AVL_WRITE && AVL_CS), .address(AVL_ADDR), .data(AVL_WRITEDATA), .byte_en(AVL_BYTE_EN), .rgb);

//Declare submodules..e.g. VGA controller, ROMS, etc
logic pixel_clk, blank, sync;
logic [9:0] DrawX, DrawY;
vga_controller da_vga_controller( .Clk(CLK), .Reset(RESET), .hs(hs), .vs(vs), .pixel_clk(pixel_clk), .blank(blank), .sync(sync), .DrawX(DrawX), .DrawY(DrawY));

logic [10:0] FONT_ADDR;
logic [7:0] FONT_DATA;
logic value;
font_rom da_font_rom( .addr(FONT_ADDR), .data(FONT_DATA));


//handle drawing (may either be combinational or sequential - or both).
logic [2:0] CharX;
logic [3:0] CharY;
logic [6:0] GridX;
logic [4:0] GridY;
logic [6:0] character, next_character;
logic invert, next_invert;

always_comb
begin
	CharX = DrawX[2:0];
	CharY = DrawY[3:0];	//get specific pixel within glyph
	GridX = DrawX >> 3;	
	GridY = DrawY >> 4;	//gets the specific row and column in the VGA grid
	VRAM_ADDR = (GridY * 80 + GridX) >> 2; //word = (row * words_per_row) + (column / columns_per_word)
end
	
always_comb begin
	//extract invert flag and character keycode from read word (VGA_READDATA)
	unique case (GridX[1:0])
		'h0: 	begin 
					invert = VRAM_READDATA[7];
					character = VRAM_READDATA[6:0];
				end
				
		'h1: 	begin 
					invert = VRAM_READDATA[15];
					character = VRAM_READDATA[14:8];
				end
				
		'h2: 	begin 
					invert = VRAM_READDATA[23];
					character = VRAM_READDATA[22:16];
				end
				
		'h3: 	begin 
					invert = VRAM_READDATA[31];
					character = VRAM_READDATA[30:24];
				end
	endcase
end

always_comb begin
	FONT_ADDR = (character << 4) + CharY;
	value = FONT_DATA[-CharX]^invert;
end

always_ff @(posedge pixel_clk)
begin
	
	if (blank == 0) begin
		red = 4'h0;
		green = 4'h0;
		blue = 4'h0;
	end
	else begin
		unique case(value)
		//Background
		'h0: begin 
			  red =   rgb[12:9];
			  green = rgb[8:5];
			  blue =  rgb[4:1];
			  end
			  
		//Foreground
		'h1: begin 
			  red =   rgb[24:21];
			  green = rgb[20:17];
			  blue =  rgb[16:13];
			  end
		endcase
	end
end

always_ff @(posedge CLK) begin
	if(RESET) begin 
		rgb <= '0; 
	end 
	if(AVL_WRITE && AVL_ADDR == 10'h258)
		rgb <= AVL_WRITEDATA;
end
endmodule

					
module vram(input logic clk, write_en, 
				input logic[9:0] read_addr_a, read_addr_b, write_addr, 
				input logic[3:0] byte_en, 
				input logic[31:0] write_data, 
				output logic[31:0] read_data_a, read_data_b);
			
	logic [31:0] memory[1024];
	
	always_ff @(posedge clk) begin
		if(write_en == 1) begin
			unique case(byte_en)
				4'b1111:	memory[write_addr][31:0] 	<= write_data[31:0];
				4'b1100: memory[write_addr][31:16] 	<= write_data[31:16];
				4'b0011: memory[write_addr][15:0]  	<= write_data[15:0];
				4'b1000: memory[write_addr][31:24] 	<= write_data[31:24];
				4'b0100: memory[write_addr][23:16] 	<= write_data[23:16];
				4'b0010: memory[write_addr][15:8]  	<= write_data[15:8];
				4'b0001: memory[write_addr][7:0]   	<= write_data[7:0];
			endcase
		end
		read_data_a <= memory[read_addr_a];
		read_data_b <= memory[read_addr_b];
	end

endmodule



